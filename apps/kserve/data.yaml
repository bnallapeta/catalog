tags:
  - AI/Machine Learning
  - Serverless
title: KServe
summary: "Serverless platform for deploying, monitoring, and managing ML models on Kubernetes."
logo: ./assets/kserve.png
logo_big: ./assets/kserve_logo.svg
description: |
    k0rdent facilitates the deployment and lifecycle management of KServe within Kubernetes clusters by leveraging its multi-cluster orchestration capabilities.
    KServe provides a Kubernetes-native platform for serving and managing machine learning models with high performance and scalability.
    
    KServe builds on Kubernetes to provide a standardized, scalable, and reliable solution for deploying, monitoring, and managing 
    machine learning models in production. With features like traffic management, canary deployments, and autoscaling, KServe enables 
    seamless deployment of models across various frameworks including TensorFlow, PyTorch, scikit-learn, XGBoost, and ONNX.
    
    KServe consists of two main components:
    1. **KServe CRDs** - Custom Resource Definitions that provide the foundation for KServe's functionality
    2. **KServe Controller** - The controller that implements serverless model serving capabilities
    
    Through k0rdent, users can easily install and manage KServe across multiple clusters, providing a centralized control plane
    to monitor health, enforce policies, and enable enterprise-grade machine learning serving. This application allows deploying 
    the KServe Controller in Serverless mode without ModelMesh functionality enabled, which is optimized for environments 
    where autoscaling and scale-to-zero capabilities are prioritized.
    
    By deploying KServe from the catalog, k0rdent enables users to build and scale ML inference services while leveraging Kubernetes-native infrastructure.
support_link: https://kserve.github.io/website/master/
install_code: |
    ~~~bash
    # First install KServe CRDs
    helm install kserve-crd oci://ghcr.io/k0rdent/catalog/charts/kgst -n kcm-system \
      --set helm.repository.url=oci://ghcr.io/kserve/charts \
      --set helm.repository.type=oci \
      --set helm.charts[0].name=kserve-crd \
      --set helm.charts[0].version=v0.14.1
    
    # Then install KServe Controller
    helm install kserve oci://ghcr.io/k0rdent/catalog/charts/kgst -n kcm-system \
      --set helm.repository.url=oci://ghcr.io/kserve/charts \
      --set helm.repository.type=oci \
      --set helm.charts[0].name=kserve \
      --set helm.charts[0].version=v0.14.1 \
      --set helm.charts[0].values.kserve.controller.deploymentMode=Serverless \
      --set helm.charts[0].values.kserve.modelmesh.enabled=false
    ~~~
verify_code: |
    ~~~bash
    kubectl get servicetemplates -A
    # NAMESPACE    NAME               VALID
    # kcm-system   kserve-crd-v0-14-1 true
    # kcm-system   kserve-v0-14-1     true
    ~~~
deploy_code: |
    ~~~yaml
    apiVersion: k0rdent.mirantis.com/v1alpha1
    kind: MultiClusterService
    metadata:
      name: kserve
    spec:
      clusterSelector:
        matchLabels:
          group: demo
      serviceSpec:
        services:
        # First deploy KServe CRDs
        - template: kserve-crd-v0-14-1
          name: kserve-crd
          namespace: kserve
        # Then deploy KServe Controller  
        - template: kserve-v0-14-1
          name: kserve
          namespace: kserve
          values: |
            kserve:
              controller:
                deploymentMode: Serverless
              modelmesh:
                enabled: false
    ~~~
doc_link: https://kserve.github.io/website/master/get_started/ 